name: Docker Image Build

env:
  DOCKER_REGISTRY: docker.kauan.sh

on:
  push:
    branches: [ "main", "development" ]

jobs:
  test_api:
    name: üß™ Test API
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    env:
      DATABASE_URL: postgresql://postgres:password@localhost:5432/faculhub
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      HASH_SECRET: ${{ secrets.HASH_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start test database
        run: docker compose -f api/docker-compose.yaml up -d

      - name: Wait for Postgres to be ready
        run: |
          until docker compose -f api/docker-compose.yaml exec db pg_isready -U postgres; do
            echo "Waiting for Postgres..."
            sleep 1
          done

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: api/pnpm-lock.yaml

      - name: Install dependencies (API)
        working-directory: api
        run: pnpm install --recursive --frozen-lockfile

      - name: Build email subproject
        working-directory: api/email
        run: pnpm build

      - name: Generate Prisma Client
        working-directory: api
        run: pnpm prisma generate

      - name: Push Prisma schema to Test DB
        working-directory: api
        run: pnpm prisma db push

      - name: Run API tests
        working-directory: api
        run: pnpm test

  build_api:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: üê≥ Build API
    needs: test_api
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push API
      uses: docker/build-push-action@v6
      with:
        context: api
        file: api/Dockerfile
        push: true
        build-args: |
          DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/faculhub?schema=public
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URI=${{ secrets.GOOGLE_CALLBACK_URI }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          HASH_SECRET=${{ secrets.HASH_SECRET }}
        tags: |
            ${{ env.DOCKER_REGISTRY }}/faculhub-api:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/faculhub-api:latest

  build_front:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: üê≥ Build Frontend
    needs: build_api
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push frontend
      uses: docker/build-push-action@v6
      with:
        context: .
        file: front/Dockerfile
        push: true
        build-args: |
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
        tags: |
            ${{ env.DOCKER_REGISTRY }}/faculhub-front:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/faculhub-front:latest

