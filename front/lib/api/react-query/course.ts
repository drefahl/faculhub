/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type { CreateCourse201, CreateCourseBody, ListCourses200Item } from "./generated.schemas"

import { request } from "../../utils/axios"
import type { ErrorType } from "../../utils/axios"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const listCourses = (options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<ListCourses200Item[]>({ url: `/courses/`, method: "GET", signal }, options)
}

export const getListCoursesQueryKey = () => {
  return [`/courses/`] as const
}

export const getListCoursesQueryOptions = <
  TData = Awaited<ReturnType<typeof listCourses>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listCourses>>, TError, TData>>
  request?: SecondParameter<typeof request>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListCoursesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listCourses>>> = ({ signal }) =>
    listCourses(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listCourses>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListCoursesQueryResult = NonNullable<Awaited<ReturnType<typeof listCourses>>>
export type ListCoursesQueryError = ErrorType<unknown>

export function useListCourses<TData = Awaited<ReturnType<typeof listCourses>>, TError = ErrorType<unknown>>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listCourses>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCourses>>,
          TError,
          Awaited<ReturnType<typeof listCourses>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListCourses<TData = Awaited<ReturnType<typeof listCourses>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listCourses>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCourses>>,
          TError,
          Awaited<ReturnType<typeof listCourses>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListCourses<TData = Awaited<ReturnType<typeof listCourses>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listCourses>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListCourses<TData = Awaited<ReturnType<typeof listCourses>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listCourses>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListCoursesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const createCourse = (
  createCourseBody: CreateCourseBody,
  options?: SecondParameter<typeof request>,
  signal?: AbortSignal,
) => {
  return request<CreateCourse201>(
    {
      url: `/courses/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCourseBody,
      signal,
    },
    options,
  )
}

export const getCreateCourseMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createCourse>>, TError, { data: CreateCourseBody }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof createCourse>>, TError, { data: CreateCourseBody }, TContext> => {
  const mutationKey = ["createCourse"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCourse>>, { data: CreateCourseBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return createCourse(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateCourseMutationResult = NonNullable<Awaited<ReturnType<typeof createCourse>>>
export type CreateCourseMutationBody = CreateCourseBody
export type CreateCourseMutationError = ErrorType<unknown>

export const useCreateCourse = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCourse>>,
      TError,
      { data: CreateCourseBody },
      TContext
    >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof createCourse>>, TError, { data: CreateCourseBody }, TContext> => {
  const mutationOptions = getCreateCourseMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const getCourseById = (id: number, options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<void>({ url: `/courses/${id}`, method: "GET", signal }, options)
}

export const getGetCourseByIdQueryKey = (id: number) => {
  return [`/courses/${id}`] as const
}

export const getGetCourseByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCourseById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCourseById>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCourseByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCourseById>>> = ({ signal }) =>
    getCourseById(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCourseById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCourseByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCourseById>>>
export type GetCourseByIdQueryError = ErrorType<unknown>

export function useGetCourseById<TData = Awaited<ReturnType<typeof getCourseById>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCourseById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCourseById>>,
          TError,
          Awaited<ReturnType<typeof getCourseById>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCourseById<TData = Awaited<ReturnType<typeof getCourseById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCourseById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCourseById>>,
          TError,
          Awaited<ReturnType<typeof getCourseById>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCourseById<TData = Awaited<ReturnType<typeof getCourseById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCourseById>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCourseById<TData = Awaited<ReturnType<typeof getCourseById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCourseById>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCourseByIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const updateCourse = (id: number, options?: SecondParameter<typeof request>) => {
  return request<void>({ url: `/courses/${id}`, method: "PATCH" }, options)
}

export const getUpdateCourseMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof updateCourse>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof updateCourse>>, TError, { id: number }, TContext> => {
  const mutationKey = ["updateCourse"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCourse>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return updateCourse(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateCourseMutationResult = NonNullable<Awaited<ReturnType<typeof updateCourse>>>

export type UpdateCourseMutationError = ErrorType<unknown>

export const useUpdateCourse = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof updateCourse>>, TError, { id: number }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof updateCourse>>, TError, { id: number }, TContext> => {
  const mutationOptions = getUpdateCourseMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const deleteCourse = (id: number, options?: SecondParameter<typeof request>) => {
  return request<void>({ url: `/courses/${id}`, method: "DELETE" }, options)
}

export const getDeleteCourseMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteCourse>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteCourse>>, TError, { id: number }, TContext> => {
  const mutationKey = ["deleteCourse"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCourse>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return deleteCourse(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteCourseMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCourse>>>

export type DeleteCourseMutationError = ErrorType<unknown>

export const useDeleteCourse = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteCourse>>, TError, { id: number }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteCourse>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteCourseMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
