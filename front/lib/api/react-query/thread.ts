/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  CreateThread200,
  CreateThreadBody,
  DeleteThread200,
  GetThreadById200,
  ListThreads200,
  ListThreadsParams,
  UpdateThread200,
  UpdateThreadBody,
} from "./generated.schemas"

import { request } from "../../utils/axios"
import type { ErrorType } from "../../utils/axios"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const listThreads = (
  params: ListThreadsParams,
  options?: SecondParameter<typeof request>,
  signal?: AbortSignal,
) => {
  return request<ListThreads200>({ url: `/api/threads/`, method: "GET", params, signal }, options)
}

export const getListThreadsQueryKey = (params: ListThreadsParams) => {
  return [`/api/threads/`, ...(params ? [params] : [])] as const
}

export const getListThreadsQueryOptions = <
  TData = Awaited<ReturnType<typeof listThreads>>,
  TError = ErrorType<unknown>,
>(
  params: ListThreadsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListThreadsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listThreads>>> = ({ signal }) =>
    listThreads(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listThreads>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListThreadsQueryResult = NonNullable<Awaited<ReturnType<typeof listThreads>>>
export type ListThreadsQueryError = ErrorType<unknown>

export function useListThreads<TData = Awaited<ReturnType<typeof listThreads>>, TError = ErrorType<unknown>>(
  params: ListThreadsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listThreads>>,
          TError,
          Awaited<ReturnType<typeof listThreads>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListThreads<TData = Awaited<ReturnType<typeof listThreads>>, TError = ErrorType<unknown>>(
  params: ListThreadsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listThreads>>,
          TError,
          Awaited<ReturnType<typeof listThreads>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListThreads<TData = Awaited<ReturnType<typeof listThreads>>, TError = ErrorType<unknown>>(
  params: ListThreadsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListThreads<TData = Awaited<ReturnType<typeof listThreads>>, TError = ErrorType<unknown>>(
  params: ListThreadsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListThreadsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const createThread = (
  createThreadBody: CreateThreadBody,
  options?: SecondParameter<typeof request>,
  signal?: AbortSignal,
) => {
  return request<CreateThread200>(
    {
      url: `/api/threads/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createThreadBody,
      signal,
    },
    options,
  )
}

export const getCreateThreadMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createThread>>, TError, { data: CreateThreadBody }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof createThread>>, TError, { data: CreateThreadBody }, TContext> => {
  const mutationKey = ["createThread"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createThread>>, { data: CreateThreadBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return createThread(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateThreadMutationResult = NonNullable<Awaited<ReturnType<typeof createThread>>>
export type CreateThreadMutationBody = CreateThreadBody
export type CreateThreadMutationError = ErrorType<unknown>

export const useCreateThread = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createThread>>,
      TError,
      { data: CreateThreadBody },
      TContext
    >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof createThread>>, TError, { data: CreateThreadBody }, TContext> => {
  const mutationOptions = getCreateThreadMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const getThreadById = (id: number, options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<GetThreadById200>({ url: `/api/threads/${id}`, method: "GET", signal }, options)
}

export const getGetThreadByIdQueryKey = (id: number) => {
  return [`/api/threads/${id}`] as const
}

export const getGetThreadByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getThreadById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getThreadById>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetThreadByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getThreadById>>> = ({ signal }) =>
    getThreadById(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getThreadById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetThreadByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getThreadById>>>
export type GetThreadByIdQueryError = ErrorType<unknown>

export function useGetThreadById<TData = Awaited<ReturnType<typeof getThreadById>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getThreadById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getThreadById>>,
          TError,
          Awaited<ReturnType<typeof getThreadById>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetThreadById<TData = Awaited<ReturnType<typeof getThreadById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getThreadById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getThreadById>>,
          TError,
          Awaited<ReturnType<typeof getThreadById>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetThreadById<TData = Awaited<ReturnType<typeof getThreadById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getThreadById>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetThreadById<TData = Awaited<ReturnType<typeof getThreadById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getThreadById>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetThreadByIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const updateThread = (
  id: number,
  updateThreadBody: UpdateThreadBody,
  options?: SecondParameter<typeof request>,
) => {
  return request<UpdateThread200>(
    {
      url: `/api/threads/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateThreadBody,
    },
    options,
  )
}

export const getUpdateThreadMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateThread>>,
    TError,
    { id: number; data: UpdateThreadBody },
    TContext
  >
  request?: SecondParameter<typeof request>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateThread>>,
  TError,
  { id: number; data: UpdateThreadBody },
  TContext
> => {
  const mutationKey = ["updateThread"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateThread>>,
    { id: number; data: UpdateThreadBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateThread(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateThreadMutationResult = NonNullable<Awaited<ReturnType<typeof updateThread>>>
export type UpdateThreadMutationBody = UpdateThreadBody
export type UpdateThreadMutationError = ErrorType<unknown>

export const useUpdateThread = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateThread>>,
      TError,
      { id: number; data: UpdateThreadBody },
      TContext
    >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateThread>>,
  TError,
  { id: number; data: UpdateThreadBody },
  TContext
> => {
  const mutationOptions = getUpdateThreadMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const deleteThread = (id: number, options?: SecondParameter<typeof request>) => {
  return request<DeleteThread200>({ url: `/api/threads/${id}`, method: "DELETE" }, options)
}

export const getDeleteThreadMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteThread>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteThread>>, TError, { id: number }, TContext> => {
  const mutationKey = ["deleteThread"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteThread>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return deleteThread(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteThreadMutationResult = NonNullable<Awaited<ReturnType<typeof deleteThread>>>

export type DeleteThreadMutationError = ErrorType<unknown>

export const useDeleteThread = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteThread>>, TError, { id: number }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteThread>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteThreadMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
