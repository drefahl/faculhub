/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  CreatePost201,
  CreatePostBody,
  DeletePost200,
  GetPostById200,
  ListPosts200,
  ListPostsParams,
  RecordPostView200,
  UpdatePost200,
  UpdatePostBody,
} from "./generated.schemas"

import { request } from "../../utils/axios"
import type { ErrorType } from "../../utils/axios"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const recordPostView = (id: number, options?: SecondParameter<typeof request>) => {
  return request<RecordPostView200>({ url: `/api/posts/${id}/view`, method: "PATCH" }, options)
}

export const getRecordPostViewMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof recordPostView>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof recordPostView>>, TError, { id: number }, TContext> => {
  const mutationKey = ["recordPostView"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof recordPostView>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return recordPostView(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RecordPostViewMutationResult = NonNullable<Awaited<ReturnType<typeof recordPostView>>>

export type RecordPostViewMutationError = ErrorType<unknown>

export const useRecordPostView = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof recordPostView>>, TError, { id: number }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof recordPostView>>, TError, { id: number }, TContext> => {
  const mutationOptions = getRecordPostViewMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const listPosts = (params: ListPostsParams, options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<ListPosts200>({ url: `/api/posts/`, method: "GET", params, signal }, options)
}

export const getListPostsQueryKey = (params: ListPostsParams) => {
  return [`/api/posts/`, ...(params ? [params] : [])] as const
}

export const getListPostsQueryOptions = <TData = Awaited<ReturnType<typeof listPosts>>, TError = ErrorType<unknown>>(
  params: ListPostsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListPostsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPosts>>> = ({ signal }) =>
    listPosts(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListPostsQueryResult = NonNullable<Awaited<ReturnType<typeof listPosts>>>
export type ListPostsQueryError = ErrorType<unknown>

export function useListPosts<TData = Awaited<ReturnType<typeof listPosts>>, TError = ErrorType<unknown>>(
  params: ListPostsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof listPosts>>, TError, Awaited<ReturnType<typeof listPosts>>>,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPosts<TData = Awaited<ReturnType<typeof listPosts>>, TError = ErrorType<unknown>>(
  params: ListPostsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPosts>>,
          TError,
          Awaited<ReturnType<typeof listPosts>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPosts<TData = Awaited<ReturnType<typeof listPosts>>, TError = ErrorType<unknown>>(
  params: ListPostsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListPosts<TData = Awaited<ReturnType<typeof listPosts>>, TError = ErrorType<unknown>>(
  params: ListPostsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListPostsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const createPost = (
  createPostBody: CreatePostBody,
  options?: SecondParameter<typeof request>,
  signal?: AbortSignal,
) => {
  return request<CreatePost201>(
    {
      url: `/api/posts/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPostBody,
      signal,
    },
    options,
  )
}

export const getCreatePostMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createPost>>, TError, { data: CreatePostBody }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof createPost>>, TError, { data: CreatePostBody }, TContext> => {
  const mutationKey = ["createPost"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPost>>, { data: CreatePostBody }> = (props) => {
    const { data } = props ?? {}

    return createPost(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreatePostMutationResult = NonNullable<Awaited<ReturnType<typeof createPost>>>
export type CreatePostMutationBody = CreatePostBody
export type CreatePostMutationError = ErrorType<unknown>

export const useCreatePost = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof createPost>>, TError, { data: CreatePostBody }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof createPost>>, TError, { data: CreatePostBody }, TContext> => {
  const mutationOptions = getCreatePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const getPostById = (id: number, options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<GetPostById200>({ url: `/api/posts/${id}`, method: "GET", signal }, options)
}

export const getGetPostByIdQueryKey = (id: number) => {
  return [`/api/posts/${id}`] as const
}

export const getGetPostByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPostById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPostByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostById>>> = ({ signal }) =>
    getPostById(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPostById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPostByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPostById>>>
export type GetPostByIdQueryError = ErrorType<unknown>

export function useGetPostById<TData = Awaited<ReturnType<typeof getPostById>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostById>>,
          TError,
          Awaited<ReturnType<typeof getPostById>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostById<TData = Awaited<ReturnType<typeof getPostById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostById>>,
          TError,
          Awaited<ReturnType<typeof getPostById>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostById<TData = Awaited<ReturnType<typeof getPostById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPostById<TData = Awaited<ReturnType<typeof getPostById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPostByIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const updatePost = (id: number, updatePostBody: UpdatePostBody, options?: SecondParameter<typeof request>) => {
  return request<UpdatePost200>(
    { url: `/api/posts/${id}`, method: "PATCH", headers: { "Content-Type": "application/json" }, data: updatePostBody },
    options,
  )
}

export const getUpdatePostMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePost>>,
    TError,
    { id: number; data: UpdatePostBody },
    TContext
  >
  request?: SecondParameter<typeof request>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePost>>,
  TError,
  { id: number; data: UpdatePostBody },
  TContext
> => {
  const mutationKey = ["updatePost"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePost>>, { id: number; data: UpdatePostBody }> = (
    props,
  ) => {
    const { id, data } = props ?? {}

    return updatePost(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdatePostMutationResult = NonNullable<Awaited<ReturnType<typeof updatePost>>>
export type UpdatePostMutationBody = UpdatePostBody
export type UpdatePostMutationError = ErrorType<unknown>

export const useUpdatePost = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePost>>,
      TError,
      { id: number; data: UpdatePostBody },
      TContext
    >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePost>>,
  TError,
  { id: number; data: UpdatePostBody },
  TContext
> => {
  const mutationOptions = getUpdatePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const deletePost = (id: number, options?: SecondParameter<typeof request>) => {
  return request<DeletePost200>({ url: `/api/posts/${id}`, method: "DELETE" }, options)
}

export const getDeletePostMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deletePost>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof deletePost>>, TError, { id: number }, TContext> => {
  const mutationKey = ["deletePost"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePost>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return deletePost(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deletePost>>>

export type DeletePostMutationError = ErrorType<unknown>

export const useDeletePost = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deletePost>>, TError, { id: number }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deletePost>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeletePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
