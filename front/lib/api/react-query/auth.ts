/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  GetApiLoginGoogleCallback401,
  Login200,
  Login401,
  LoginBody,
  Refresh200,
  Refresh401,
} from "./generated.schemas"

import { request } from "../../utils/axios"
import type { ErrorType } from "../../utils/axios"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const googleLogin = (options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<void>({ url: `/api/login/google`, method: "GET", signal }, options)
}

export const getGoogleLoginQueryKey = () => {
  return [`/api/login/google`] as const
}

export const getGoogleLoginQueryOptions = <
  TData = Awaited<ReturnType<typeof googleLogin>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>>
  request?: SecondParameter<typeof request>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGoogleLoginQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof googleLogin>>> = ({ signal }) =>
    googleLogin(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof googleLogin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GoogleLoginQueryResult = NonNullable<Awaited<ReturnType<typeof googleLogin>>>
export type GoogleLoginQueryError = ErrorType<unknown>

export function useGoogleLogin<TData = Awaited<ReturnType<typeof googleLogin>>, TError = ErrorType<unknown>>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof googleLogin>>,
          TError,
          Awaited<ReturnType<typeof googleLogin>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGoogleLogin<TData = Awaited<ReturnType<typeof googleLogin>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof googleLogin>>,
          TError,
          Awaited<ReturnType<typeof googleLogin>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGoogleLogin<TData = Awaited<ReturnType<typeof googleLogin>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGoogleLogin<TData = Awaited<ReturnType<typeof googleLogin>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGoogleLoginQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const login = (loginBody: LoginBody, options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<Login200>(
    { url: `/api/login`, method: "POST", headers: { "Content-Type": "application/json" }, data: loginBody, signal },
    options,
  )
}

export const getLoginMutationOptions = <TError = ErrorType<Login401>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginBody }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginBody }, TContext> => {
  const mutationKey = ["login"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, { data: LoginBody }> = (props) => {
    const { data } = props ?? {}

    return login(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationBody = LoginBody
export type LoginMutationError = ErrorType<Login401>

export const useLogin = <TError = ErrorType<Login401>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginBody }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof login>>, TError, { data: LoginBody }, TContext> => {
  const mutationOptions = getLoginMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const getApiLoginGoogleCallback = (options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<unknown>({ url: `/api/login/google/callback`, method: "GET", signal }, options)
}

export const getGetApiLoginGoogleCallbackQueryKey = () => {
  return [`/api/login/google/callback`] as const
}

export const getGetApiLoginGoogleCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = ErrorType<GetApiLoginGoogleCallback401>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>>
  request?: SecondParameter<typeof request>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiLoginGoogleCallbackQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>> = ({ signal }) =>
    getApiLoginGoogleCallback(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiLoginGoogleCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>>
export type GetApiLoginGoogleCallbackQueryError = ErrorType<GetApiLoginGoogleCallback401>

export function useGetApiLoginGoogleCallback<
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = ErrorType<GetApiLoginGoogleCallback401>,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
          TError,
          Awaited<ReturnType<typeof getApiLoginGoogleCallback>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiLoginGoogleCallback<
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = ErrorType<GetApiLoginGoogleCallback401>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
          TError,
          Awaited<ReturnType<typeof getApiLoginGoogleCallback>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiLoginGoogleCallback<
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = ErrorType<GetApiLoginGoogleCallback401>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiLoginGoogleCallback<
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = ErrorType<GetApiLoginGoogleCallback401>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiLoginGoogleCallbackQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const refresh = (options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<Refresh200>({ url: `/api/refresh`, method: "GET", signal }, options)
}

export const getRefreshQueryKey = () => {
  return [`/api/refresh`] as const
}

export const getRefreshQueryOptions = <
  TData = Awaited<ReturnType<typeof refresh>>,
  TError = ErrorType<Refresh401>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof refresh>>, TError, TData>>
  request?: SecondParameter<typeof request>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRefreshQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof refresh>>> = ({ signal }) => refresh(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof refresh>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RefreshQueryResult = NonNullable<Awaited<ReturnType<typeof refresh>>>
export type RefreshQueryError = ErrorType<Refresh401>

export function useRefresh<TData = Awaited<ReturnType<typeof refresh>>, TError = ErrorType<Refresh401>>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof refresh>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof refresh>>, TError, Awaited<ReturnType<typeof refresh>>>,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRefresh<TData = Awaited<ReturnType<typeof refresh>>, TError = ErrorType<Refresh401>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof refresh>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof refresh>>, TError, Awaited<ReturnType<typeof refresh>>>,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRefresh<TData = Awaited<ReturnType<typeof refresh>>, TError = ErrorType<Refresh401>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof refresh>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useRefresh<TData = Awaited<ReturnType<typeof refresh>>, TError = ErrorType<Refresh401>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof refresh>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getRefreshQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
