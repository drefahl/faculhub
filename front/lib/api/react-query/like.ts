/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type { CountLikes200, LikePost201, UnlikePost200 } from "./generated.schemas"

import { request } from "../../utils/axios"
import type { ErrorType } from "../../utils/axios"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const countLikes = (postId: number, options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<CountLikes200>({ url: `/likes/${postId}/count`, method: "GET", signal }, options)
}

export const getCountLikesQueryKey = (postId: number) => {
  return [`/likes/${postId}/count`] as const
}

export const getCountLikesQueryOptions = <TData = Awaited<ReturnType<typeof countLikes>>, TError = ErrorType<unknown>>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof countLikes>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCountLikesQueryKey(postId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countLikes>>> = ({ signal }) =>
    countLikes(postId, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!postId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countLikes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountLikesQueryResult = NonNullable<Awaited<ReturnType<typeof countLikes>>>
export type CountLikesQueryError = ErrorType<unknown>

export function useCountLikes<TData = Awaited<ReturnType<typeof countLikes>>, TError = ErrorType<unknown>>(
  postId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof countLikes>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countLikes>>,
          TError,
          Awaited<ReturnType<typeof countLikes>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountLikes<TData = Awaited<ReturnType<typeof countLikes>>, TError = ErrorType<unknown>>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof countLikes>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countLikes>>,
          TError,
          Awaited<ReturnType<typeof countLikes>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountLikes<TData = Awaited<ReturnType<typeof countLikes>>, TError = ErrorType<unknown>>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof countLikes>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountLikes<TData = Awaited<ReturnType<typeof countLikes>>, TError = ErrorType<unknown>>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof countLikes>>, TError, TData>>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getCountLikesQueryOptions(postId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const likePost = (postId: number, options?: SecondParameter<typeof request>, signal?: AbortSignal) => {
  return request<LikePost201>({ url: `/likes/${postId}`, method: "POST", signal }, options)
}

export const getLikePostMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof likePost>>, TError, { postId: number }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof likePost>>, TError, { postId: number }, TContext> => {
  const mutationKey = ["likePost"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof likePost>>, { postId: number }> = (props) => {
    const { postId } = props ?? {}

    return likePost(postId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LikePostMutationResult = NonNullable<Awaited<ReturnType<typeof likePost>>>

export type LikePostMutationError = ErrorType<unknown>

export const useLikePost = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof likePost>>, TError, { postId: number }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof likePost>>, TError, { postId: number }, TContext> => {
  const mutationOptions = getLikePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const unlikePost = (postId: number, options?: SecondParameter<typeof request>) => {
  return request<UnlikePost200>({ url: `/likes/${postId}`, method: "DELETE" }, options)
}

export const getUnlikePostMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof unlikePost>>, TError, { postId: number }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof unlikePost>>, TError, { postId: number }, TContext> => {
  const mutationKey = ["unlikePost"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof unlikePost>>, { postId: number }> = (props) => {
    const { postId } = props ?? {}

    return unlikePost(postId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UnlikePostMutationResult = NonNullable<Awaited<ReturnType<typeof unlikePost>>>

export type UnlikePostMutationError = ErrorType<unknown>

export const useUnlikePost = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof unlikePost>>, TError, { postId: number }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof unlikePost>>, TError, { postId: number }, TContext> => {
  const mutationOptions = getUnlikePostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
