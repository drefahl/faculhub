/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

import type { PostApiAuthLogin200, PostApiAuthLogin401, PostApiAuthLoginBody } from "../generated.schemas"

export const getApiHealth = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:3333/api/health`, options)
}

export const getGetApiHealthQueryKey = () => {
  return [`http://localhost:3333/api/health`] as const
}

export const getGetApiHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiHealth>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>>
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiHealthQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiHealth>>> = ({ signal }) =>
    getApiHealth({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getApiHealth>>>
export type GetApiHealthQueryError = AxiosError<unknown>

export function useGetApiHealth<
  TData = Awaited<ReturnType<typeof getApiHealth>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiHealth>>,
        TError,
        Awaited<ReturnType<typeof getApiHealth>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiHealth<
  TData = Awaited<ReturnType<typeof getApiHealth>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiHealth>>,
        TError,
        Awaited<ReturnType<typeof getApiHealth>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiHealth<
  TData = Awaited<ReturnType<typeof getApiHealth>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiHealth<
  TData = Awaited<ReturnType<typeof getApiHealth>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiHealthQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postApiAuthLogin = (
  postApiAuthLoginBody: PostApiAuthLoginBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostApiAuthLogin200>> => {
  return axios.post(`http://localhost:3333/api/auth/login`, postApiAuthLoginBody, options)
}

export const getPostApiAuthLoginMutationOptions = <
  TError = AxiosError<PostApiAuthLogin401>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: PostApiAuthLoginBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: PostApiAuthLoginBody },
  TContext
> => {
  const mutationKey = ["postApiAuthLogin"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, { data: PostApiAuthLoginBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return postApiAuthLogin(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
export type PostApiAuthLoginMutationBody = PostApiAuthLoginBody
export type PostApiAuthLoginMutationError = AxiosError<PostApiAuthLogin401>

export const usePostApiAuthLogin = <TError = AxiosError<PostApiAuthLogin401>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: PostApiAuthLoginBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: PostApiAuthLoginBody },
  TContext
> => {
  const mutationOptions = getPostApiAuthLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
