/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import { makeRequest } from "../../utils/axios"
import type { ErrorType } from "../../utils/axios"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const getApiFilesId = (id: string, options?: SecondParameter<typeof makeRequest>, signal?: AbortSignal) => {
  return makeRequest<void>({ url: `/api/files/${id}`, method: "GET", signal }, options)
}

export const getGetApiFilesIdQueryKey = (id: string) => {
  return [`/api/files/${id}`] as const
}

export const getGetApiFilesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiFilesId>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>>
    request?: SecondParameter<typeof makeRequest>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiFilesIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFilesId>>> = ({ signal }) =>
    getApiFilesId(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiFilesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiFilesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFilesId>>>
export type GetApiFilesIdQueryError = ErrorType<unknown>

export function useGetApiFilesId<TData = Awaited<ReturnType<typeof getApiFilesId>>, TError = ErrorType<unknown>>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesId>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesId>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof makeRequest>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesId<TData = Awaited<ReturnType<typeof getApiFilesId>>, TError = ErrorType<unknown>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesId>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesId>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof makeRequest>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesId<TData = Awaited<ReturnType<typeof getApiFilesId>>, TError = ErrorType<unknown>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>>
    request?: SecondParameter<typeof makeRequest>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiFilesId<TData = Awaited<ReturnType<typeof getApiFilesId>>, TError = ErrorType<unknown>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesId>>, TError, TData>>
    request?: SecondParameter<typeof makeRequest>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiFilesIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
