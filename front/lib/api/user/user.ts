/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

import type {
  CreateUserBody,
  GetUserProfile200,
  UpdateUserProfile200,
  UpdateUserProfileBody,
} from "../generated.schemas"

/**
 * Create a new user
 */
export const createUser = (
  createUserBody: CreateUserBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`http://localhost:3333/api/users/`, createUserBody, options)
}

export const getCreateUserMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: CreateUserBody }, TContext>
  axios?: AxiosRequestConfig
}): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: CreateUserBody }, TContext> => {
  const mutationKey = ["createUser"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, { data: CreateUserBody }> = (props) => {
    const { data } = props ?? {}

    return createUser(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
export type CreateUserMutationBody = CreateUserBody
export type CreateUserMutationError = AxiosError<unknown>

export const useCreateUser = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: CreateUserBody }, TContext>
  axios?: AxiosRequestConfig
}): UseMutationResult<Awaited<ReturnType<typeof createUser>>, TError, { data: CreateUserBody }, TContext> => {
  const mutationOptions = getCreateUserMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Get user profile
 */
export const getUserProfile = (options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserProfile200>> => {
  return axios.get(`http://localhost:3333/api/users/me`, options)
}

export const getGetUserProfileQueryKey = () => {
  return [`http://localhost:3333/api/users/me`] as const
}

export const getGetUserProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUserProfileQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProfile>>> = ({ signal }) =>
    getUserProfile({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserProfileQueryError = AxiosError<unknown>

export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = AxiosError<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUserProfile>>,
        TError,
        Awaited<ReturnType<typeof getUserProfile>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUserProfile>>,
        TError,
        Awaited<ReturnType<typeof getUserProfile>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetUserProfileQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update user profile
 */
export const updateUserProfile = (
  updateUserProfileBody: UpdateUserProfileBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UpdateUserProfile200>> => {
  return axios.patch(`http://localhost:3333/api/users/me`, updateUserProfileBody, options)
}

export const getUpdateUserProfileMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserProfile>>,
    TError,
    { data: UpdateUserProfileBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserProfile>>,
  TError,
  { data: UpdateUserProfileBody },
  TContext
> => {
  const mutationKey = ["updateUserProfile"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserProfile>>, { data: UpdateUserProfileBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return updateUserProfile(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateUserProfileMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserProfile>>>
export type UpdateUserProfileMutationBody = UpdateUserProfileBody
export type UpdateUserProfileMutationError = AxiosError<unknown>

export const useUpdateUserProfile = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserProfile>>,
    TError,
    { data: UpdateUserProfileBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUserProfile>>,
  TError,
  { data: UpdateUserProfileBody },
  TContext
> => {
  const mutationOptions = getUpdateUserProfileMutationOptions(options)

  return useMutation(mutationOptions)
}
