/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type { CreateCommentBody, UpdateCommentBody } from "../generated.schemas"

import { makeRequest } from "../../utils/axios"
import type { ErrorType } from "../../utils/axios"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const getCommentById = (id: number, options?: SecondParameter<typeof makeRequest>, signal?: AbortSignal) => {
  return makeRequest<void>({ url: `/api/comments/${id}`, method: "GET", signal }, options)
}

export const getGetCommentByIdQueryKey = (id: number) => {
  return [`/api/comments/${id}`] as const
}

export const getGetCommentByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommentById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentById>>, TError, TData>>
    request?: SecondParameter<typeof makeRequest>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCommentByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommentById>>> = ({ signal }) =>
    getCommentById(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommentById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommentByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCommentById>>>
export type GetCommentByIdQueryError = ErrorType<unknown>

export function useGetCommentById<TData = Awaited<ReturnType<typeof getCommentById>>, TError = ErrorType<unknown>>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentById>>,
          TError,
          Awaited<ReturnType<typeof getCommentById>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof makeRequest>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommentById<TData = Awaited<ReturnType<typeof getCommentById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentById>>,
          TError,
          Awaited<ReturnType<typeof getCommentById>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof makeRequest>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommentById<TData = Awaited<ReturnType<typeof getCommentById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentById>>, TError, TData>>
    request?: SecondParameter<typeof makeRequest>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCommentById<TData = Awaited<ReturnType<typeof getCommentById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentById>>, TError, TData>>
    request?: SecondParameter<typeof makeRequest>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCommentByIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const updateComment = (
  id: number,
  updateCommentBody: UpdateCommentBody,
  options?: SecondParameter<typeof makeRequest>,
) => {
  return makeRequest<void>(
    {
      url: `/api/comments/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateCommentBody,
    },
    options,
  )
}

export const getUpdateCommentMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateComment>>,
    TError,
    { id: number; data: UpdateCommentBody },
    TContext
  >
  request?: SecondParameter<typeof makeRequest>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateComment>>,
  TError,
  { id: number; data: UpdateCommentBody },
  TContext
> => {
  const mutationKey = ["updateComment"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateComment>>,
    { id: number; data: UpdateCommentBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateComment(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateCommentMutationResult = NonNullable<Awaited<ReturnType<typeof updateComment>>>
export type UpdateCommentMutationBody = UpdateCommentBody
export type UpdateCommentMutationError = ErrorType<unknown>

export const useUpdateComment = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateComment>>,
    TError,
    { id: number; data: UpdateCommentBody },
    TContext
  >
  request?: SecondParameter<typeof makeRequest>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateComment>>,
  TError,
  { id: number; data: UpdateCommentBody },
  TContext
> => {
  const mutationOptions = getUpdateCommentMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deleteComment = (id: number, options?: SecondParameter<typeof makeRequest>) => {
  return makeRequest<void>({ url: `/api/comments/${id}`, method: "DELETE" }, options)
}

export const getDeleteCommentMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof makeRequest>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError, { id: number }, TContext> => {
  const mutationKey = ["deleteComment"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteComment>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return deleteComment(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteCommentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteComment>>>

export type DeleteCommentMutationError = ErrorType<unknown>

export const useDeleteComment = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof makeRequest>
}): UseMutationResult<Awaited<ReturnType<typeof deleteComment>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteCommentMutationOptions(options)

  return useMutation(mutationOptions)
}
export const createComment = (
  createCommentBody: CreateCommentBody,
  options?: SecondParameter<typeof makeRequest>,
  signal?: AbortSignal,
) => {
  return makeRequest<void>(
    {
      url: `/api/comments/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCommentBody,
      signal,
    },
    options,
  )
}

export const getCreateCommentMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createComment>>,
    TError,
    { data: CreateCommentBody },
    TContext
  >
  request?: SecondParameter<typeof makeRequest>
}): UseMutationOptions<Awaited<ReturnType<typeof createComment>>, TError, { data: CreateCommentBody }, TContext> => {
  const mutationKey = ["createComment"]
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createComment>>, { data: CreateCommentBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return createComment(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateCommentMutationResult = NonNullable<Awaited<ReturnType<typeof createComment>>>
export type CreateCommentMutationBody = CreateCommentBody
export type CreateCommentMutationError = ErrorType<unknown>

export const useCreateComment = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createComment>>,
    TError,
    { data: CreateCommentBody },
    TContext
  >
  request?: SecondParameter<typeof makeRequest>
}): UseMutationResult<Awaited<ReturnType<typeof createComment>>, TError, { data: CreateCommentBody }, TContext> => {
  const mutationOptions = getCreateCommentMutationOptions(options)

  return useMutation(mutationOptions)
}
