/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

import type { Health200 } from "../generated.schemas"

export const health = (options?: AxiosRequestConfig): Promise<AxiosResponse<Health200>> => {
  return axios.get(`http://localhost:3333/api/health`, options)
}

export const getHealthQueryKey = () => {
  return [`http://localhost:3333/api/health`] as const
}

export const getHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof health>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getHealthQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof health>>> = ({ signal }) => health({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof health>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthQueryResult = NonNullable<Awaited<ReturnType<typeof health>>>
export type HealthQueryError = AxiosError<unknown>

export function useHealth<TData = Awaited<ReturnType<typeof health>>, TError = AxiosError<unknown>>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof health>>, TError, Awaited<ReturnType<typeof health>>>,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealth<TData = Awaited<ReturnType<typeof health>>, TError = AxiosError<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof health>>, TError, Awaited<ReturnType<typeof health>>>,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealth<TData = Awaited<ReturnType<typeof health>>, TError = AxiosError<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useHealth<TData = Awaited<ReturnType<typeof health>>, TError = AxiosError<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getHealthQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
