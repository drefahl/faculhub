/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

import type {
  GetApiLoginGoogleCallback200,
  GetApiLoginGoogleCallback401,
  Login200,
  Login401,
  LoginBody,
} from "../generated.schemas"

export const googleLogin = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:3333/api/login/google`, options)
}

export const getGoogleLoginQueryKey = () => {
  return [`http://localhost:3333/api/login/google`] as const
}

export const getGoogleLoginQueryOptions = <
  TData = Awaited<ReturnType<typeof googleLogin>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>>
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGoogleLoginQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof googleLogin>>> = ({ signal }) =>
    googleLogin({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof googleLogin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GoogleLoginQueryResult = NonNullable<Awaited<ReturnType<typeof googleLogin>>>
export type GoogleLoginQueryError = AxiosError<unknown>

export function useGoogleLogin<TData = Awaited<ReturnType<typeof googleLogin>>, TError = AxiosError<unknown>>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof googleLogin>>,
        TError,
        Awaited<ReturnType<typeof googleLogin>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGoogleLogin<
  TData = Awaited<ReturnType<typeof googleLogin>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof googleLogin>>,
        TError,
        Awaited<ReturnType<typeof googleLogin>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGoogleLogin<
  TData = Awaited<ReturnType<typeof googleLogin>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGoogleLogin<
  TData = Awaited<ReturnType<typeof googleLogin>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGoogleLoginQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const login = (loginBody: LoginBody, options?: AxiosRequestConfig): Promise<AxiosResponse<Login200>> => {
  return axios.post(`http://localhost:3333/api/login`, loginBody, options)
}

export const getLoginMutationOptions = <TError = AxiosError<Login401>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginBody }, TContext>
  axios?: AxiosRequestConfig
}): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginBody }, TContext> => {
  const mutationKey = ["login"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, { data: LoginBody }> = (props) => {
    const { data } = props ?? {}

    return login(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationBody = LoginBody
export type LoginMutationError = AxiosError<Login401>

export const useLogin = <TError = AxiosError<Login401>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginBody }, TContext>
  axios?: AxiosRequestConfig
}): UseMutationResult<Awaited<ReturnType<typeof login>>, TError, { data: LoginBody }, TContext> => {
  const mutationOptions = getLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getApiLoginGoogleCallback = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiLoginGoogleCallback200>> => {
  return axios.get(`http://localhost:3333/api/login/google/callback`, options)
}

export const getGetApiLoginGoogleCallbackQueryKey = () => {
  return [`http://localhost:3333/api/login/google/callback`] as const
}

export const getGetApiLoginGoogleCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = AxiosError<GetApiLoginGoogleCallback401>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>>
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiLoginGoogleCallbackQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>> = ({ signal }) =>
    getApiLoginGoogleCallback({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiLoginGoogleCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>>
export type GetApiLoginGoogleCallbackQueryError = AxiosError<GetApiLoginGoogleCallback401>

export function useGetApiLoginGoogleCallback<
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = AxiosError<GetApiLoginGoogleCallback401>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
        TError,
        Awaited<ReturnType<typeof getApiLoginGoogleCallback>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiLoginGoogleCallback<
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = AxiosError<GetApiLoginGoogleCallback401>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
        TError,
        Awaited<ReturnType<typeof getApiLoginGoogleCallback>>
      >,
      "initialData"
    >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiLoginGoogleCallback<
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = AxiosError<GetApiLoginGoogleCallback401>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiLoginGoogleCallback<
  TData = Awaited<ReturnType<typeof getApiLoginGoogleCallback>>,
  TError = AxiosError<GetApiLoginGoogleCallback401>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLoginGoogleCallback>>, TError, TData>>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiLoginGoogleCallbackQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
