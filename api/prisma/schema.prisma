generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model user {
  id           Int       @id(map: "user_pk") @default(autoincrement())
  googleId     String?   @unique
  email        String    @unique(map: "user_unique") @db.VarChar
  name         String?   @db.VarChar
  password     String?   @db.VarChar
  role         Role      @default(USER)
  profilePic   file?     @relation(fields: [profilePicId], references: [id])
  profilePicId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  thread       thread[]
  comment      comment[]
  post         post[]
  like         like[]
}

model file {
  id        String   @id @default(cuid())
  filename  String
  mimeType  String
  data      Bytes
  createdAt DateTime @default(now())
  user      user[]
}

model thread {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  author    user      @relation(fields: [authorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  comment[]
}

model comment {
  id        Int      @id @default(autoincrement())
  threadId  Int
  content   String
  authorId  Int
  author    user     @relation(fields: [authorId], references: [id])
  thread    thread   @relation(fields: [threadId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     post[]
}

model like {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  post   post @relation(fields: [postId], references: [id])
  user   user @relation(fields: [userId], references: [id])
}

enum postType {
  NEWS
  EVENT
}

model post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.Text
  type      postType
  isPinned  Boolean   @default(false)
  eventDate DateTime?
  location  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  Int
  views     Int       @default(0)
  courses   course[]
  author    user      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  comment[]
  likes     like[]

  @@index([authorId])
  @@index([type])
  @@index([createdAt])
}

model course {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     post[]
}
